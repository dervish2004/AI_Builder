'use client';

import { useState, useEffect, createElement, FormEvent, DragEvent } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { createClient } from '@supabase/supabase-js';

// Define the type for a component in the library and on the canvas
interface ComponentItem {
  id: string;
  name: string;
  code: string;
}

interface CanvasItem {
  id: string;
  code: string;
}

// Reusable components that could be generated by the AI
const HeroSection = `
<div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white py-20 text-center rounded-lg shadow-xl m-4">
  <h1 class="text-4xl md:text-6xl font-bold mb-4">Your Idea, Built in Seconds.</h1>
  <p class="text-lg md:text-xl max-w-2xl mx-auto mb-8">
    Our AI-powered platform helps you bring your web applications to life with no code required.
  </p>
  <button class="bg-white text-purple-600 font-bold py-3 px-8 rounded-full shadow-lg hover:bg-gray-100 transition duration-300">
    Get Started
  </button>
</div>
`;

const FeaturesSection = `
<div class="py-16 text-center m-4 rounded-lg shadow-xl bg-gray-100 dark:bg-gray-800">
  <h2 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-12">Key Features</h2>
  <div class="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto px-6">
    <div class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">AI-Powered</h3>
      <p class="text-gray-500 dark:text-gray-400">Generate complex components with a simple prompt.</p>
    </div>
    <div class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">Drag and Drop</h3>
      <p class="text-gray-500 dark:text-gray-400">Visually arrange your application on a live canvas.</p>
    </div>
    <div class="bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">Instant Deployment</h3>
      <p class="text-gray-500 dark:text-gray-400">Go from idea to live app in minutes.</p>
    </div>
  </div>
</div>
`;

const Footer = `
<div class="bg-gray-800 text-white py-8 text-center m-4 rounded-lg shadow-xl">
  <p class="text-gray-400">Â© 2024 AI Builder. All rights reserved.</p>
</div>
`;

const ContactForm = `
<div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md m-4 max-w-lg mx-auto">
  <h2 class="text-2xl font-bold mb-4 text-center text-gray-900 dark:text-white">Contact Us</h2>
  <form class="space-y-4">
    <div>
      <label htmlFor="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
      <input type="text" id="name" name="name" class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" />
    </div>
    <div>
      <label htmlFor="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
      <input type="email" id="email" name="email" class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" />
    </div>
    <div>
      <label htmlFor="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Message</label>
      <textarea id="message" name="message" rows={4} class="mt-1 block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"></textarea>
    </div>
    <button type="submit" class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Submit</button>
  </form>
</div>
`;

const PricingTable = `
<div class="bg-white dark:bg-gray-800 py-16 text-center m-4 rounded-lg shadow-xl">
  <h2 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-12">Pricing</h2>
  <div class="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto px-6">
    <div class="flex flex-col bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">Basic</h3>
      <p class="text-gray-500 dark:text-gray-400">A short description of the plan.</p>
      <div class="mt-auto pt-4">
        <button class="w-full py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none">Choose Plan</button>
      </div>
    </div>
    <div class="flex flex-col bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">Pro</h3>
      <p class="text-gray-500 dark:text-gray-400">A short description of the plan.</p>
      <div class="mt-auto pt-4">
        <button class="w-full py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none">Choose Plan</button>
      </div>
    </div>
    <div class="flex flex-col bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-200 mb-2">Enterprise</h3>
      <p class="text-gray-500 dark:text-gray-400">A short description of the plan.</p>
      <div class="mt-auto pt-4">
        <button class="w-full py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none">Choose Plan</button>
      </div>
    </div>
  </div>
</div>
`;

const Testimonials = `
<div class="bg-white dark:bg-gray-800 py-16 text-center m-4 rounded-lg shadow-xl">
  <h2 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-12">What Our Users Say</h2>
  <div class="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto px-6">
    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <p class="text-gray-600 dark:text-gray-300 italic mb-4">"This platform changed the way I build websites. It's incredibly fast and easy!"</p>
      <p class="text-sm font-semibold text-gray-700 dark:text-gray-200">- Jane Doe</p>
    </div>
    <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:scale-105">
      <p class="text-gray-600 dark:text-gray-300 italic mb-4">"The AI-generated components are a huge time-saver. Highly recommend."</p>
      <p class="text-sm font-semibold text-gray-700 dark:text-gray-200">- John Smith</p>
    </div>
  </div>
</div>
`;

const ContactSection = `
<div class="bg-gray-100 dark:bg-gray-800 py-16 m-4 rounded-lg shadow-xl">
  <div class="max-w-4xl mx-auto px-6 text-center">
    <h2 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-4">Ready to get started?</h2>
    <p class="text-gray-600 dark:text-gray-300 mb-8">Join thousands of businesses who are building amazing things with our platform.</p>
    <button class="bg-indigo-600 text-white font-bold py-3 px-8 rounded-full shadow-lg hover:bg-indigo-700 transition duration-300">
      Contact Sales
    </button>
  </div>
</div>
`;

const Header = `
<header class="bg-white dark:bg-gray-800 border-b shadow-sm w-full py-4 px-6 rounded-lg m-4">
  <div class="flex justify-between items-center max-w-6xl mx-auto">
    <div class="text-2xl font-bold text-indigo-600">AI Builder</div>
    <nav class="space-x-6 hidden md:flex">
      <a href="#home" class="text-gray-600 dark:text-gray-300 hover:text-indigo-600">Home</a>
      <a href="#features" class="text-gray-600 dark:text-gray-300 hover:text-indigo-600">Features</a>
      <a href="#pricing" class="text-gray-600 dark:text-gray-300 hover:text-indigo-600">Pricing</a>
      <a href="#contact" class="text-gray-600 dark:text-gray-300 hover:text-indigo-600">Contact</a>
    </nav>
  </div>
</header>
`;

const AboutUsSection = `
<div class="bg-white dark:bg-gray-800 py-16 m-4 rounded-lg shadow-xl">
  <div class="max-w-4xl mx-auto px-6 text-center">
    <h2 class="text-3xl font-bold text-gray-800 dark:text-gray-100 mb-4">About Us</h2>
    <p class="text-gray-600 dark:text-gray-300">
      We are a team of passionate developers and designers dedicated to making web development accessible to everyone. Our mission is to empower non-technical users to bring their ideas to life quickly and easily.
    </p>
  </div>
</div>
`;

const CallToAction = `
<div class="bg-indigo-600 text-white py-16 text-center m-4 rounded-lg shadow-xl">
  <h2 class="text-3xl font-bold mb-4">Build Your Dream Website Today</h2>
  <p class="text-lg mb-8">Start for free and see your ideas come to life in minutes.</p>
  <button class="bg-white text-indigo-600 font-bold py-3 px-8 rounded-full shadow-lg hover:bg-gray-100 transition duration-300">
    Start Building
  </button>
</div>
`;

const DynamicComponentRenderer = ({ code }: { code: string }) => {
  const isCodeBlock = code.trim().startsWith('```');
  let cleanCode = code;

  if (isCodeBlock) {
    const lines = code.trim().split('\n');
    cleanCode = lines.slice(1, lines.length - 1).join('\n');
  }

  // Use a regular expression to find and remove hardcoded dark-themed background colors
  const strippedCode = cleanCode.replace(/bg-gray-800|bg-gray-900|bg-black/g, '');

  return createElement('div', {
    className: `p-4 my-4 rounded-lg shadow-md border border-gray-200 bg-white text-gray-900`,
    dangerouslySetInnerHTML: { __html: strippedCode }
  });
};

const initialComponentLibrary: ComponentItem[] = [
  { id: 'hero-section', name: 'Hero Section', code: HeroSection },
  { id: 'features-section', name: 'Features Section', code: FeaturesSection },
  { id: 'contact-form', name: 'Contact Form', code: ContactForm },
  { id: 'pricing-table', name: 'Pricing Table', code: PricingTable },
  { id: 'testimonials', name: 'Testimonials', code: Testimonials },
  { id: 'contact-section', name: 'Contact Section', code: ContactSection },
  { id: 'header', name: 'Header', code: Header },
  { id: 'about-us', name: 'About Us', code: AboutUsSection },
  { id: 'call-to-action', name: 'Call to Action', code: CallToAction },
  { id: 'footer', name: 'Footer', code: Footer },
];

export default function Home() {
  const [prompt, setPrompt] = useState<string>('');
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [copied, setCopied] = useState<boolean>(false);
  const [canvasItems, setCanvasItems] = useState<CanvasItem[]>([]);
  const [isDragOver, setIsDragOver] = useState<boolean>(false);
  const [publishedUrl, setPublishedUrl] = useState<string | null>(null);

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  );

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, []);

  const [componentLibrary, setComponentLibrary] = useState<ComponentItem[]>(initialComponentLibrary);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>): Promise<void> => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    setGeneratedCode('');
    setCopied(false);

    try {
      const response = await fetch('/api/generate-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        let errorMessage = `API Error: ${response.status} - ${response.statusText}`;
        try {
          const errorData = await response.json();
          if (errorData.error && errorData.error.message) {
            errorMessage = errorData.error.message;
          } else {
            errorMessage = errorData.error || errorData.message || errorMessage;
          }
        } catch {
          // Fallback to the original error text if parsing fails
          errorMessage = await response.text();
        }
        throw new Error(errorMessage);
      }

      const data = await response.json();
      const newComponentId = uuidv4();
      const newComponentName = 'Generated Component';
      const newComponentCode = data.code;

      const newComponent: ComponentItem = {
        id: newComponentId,
        name: newComponentName,
        code: newComponentCode,
      };

      setComponentLibrary(prevLibrary => [...prevLibrary, newComponent]);
      setGeneratedCode(newComponentCode);
      setPrompt('');
    } catch (err: unknown) {
      console.error('Front-end API call error:', err);
      let userErrorMessage = 'An unknown error occurred. Please try again.';

      if (err instanceof Error) {
        if (err.message.includes('402')) {
          userErrorMessage = 'Your credits have been exhausted. Please wait for them to refresh or try a simpler prompt.';
        } else if (err.message) {
          userErrorMessage = err.message;
        }
      }

      setError(userErrorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopy = async (): Promise<void> => {
    try {
      if (generatedCode) {
        await navigator.clipboard.writeText(generatedCode);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      }
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
  };

  const handleDragStart = (e: DragEvent<HTMLDivElement>, componentId: string): void => {
    e.dataTransfer.setData("text/plain", componentId);
  };

  const handleDragOver = (e: DragEvent<HTMLDivElement>): void => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (): void => {
    setIsDragOver(false);
  };

  const handleDrop = (e: DragEvent<HTMLDivElement>): void => {
    e.preventDefault();
    setIsDragOver(false);
    const componentId = e.dataTransfer.getData("text/plain");

    const droppedComponent = componentLibrary.find(comp => comp.id === componentId);
    if (droppedComponent) {
      const newComponent: CanvasItem = {
        id: uuidv4(),
        code: droppedComponent.code,
      };
      setCanvasItems(prevItems => [...prevItems, newComponent]);
    }
  };

  const handleRemoveItem = (idToRemove: string): void => {
    setCanvasItems(prevItems => prevItems.filter(item => item.id !== idToRemove));
  };

  const handlePublish = async (): Promise<void> => {
    if (canvasItems.length === 0) {
      setError('Cannot publish an empty canvas.');
      return;
    }
    
    setIsLoading(true);
    setPublishedUrl(null);
    setError('');

    try {
      // Supabase automatically generates an ID if you don't provide one
      const { data, error } = await supabase
        .from('published_pages')
        .insert({ components: canvasItems })
        .select();
        
      if (error) {
        throw error;
      }
      
      const publishId = data[0].id;
      const url = `${window.location.origin}/published/${publishId}`;
      setPublishedUrl(url);
    } catch (e: unknown) {
      console.error('Error publishing page:', e);
      let errorMessage = 'Failed to publish. Please check your Supabase setup and RLS rules.';
      if (e instanceof Error) {
        if (e.message.includes('permission-denied')) {
          errorMessage = 'Permission denied. Please check your Supabase RLS policies.';
        } else {
          errorMessage = e.message;
        }
      }
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main className={`flex min-h-screen flex-col items-center p-8 lg:p-24 bg-gray-100 text-gray-900 transition-colors duration-300`}>
      <div className="z-10 w-full max-w-7xl items-center justify-between font-sans text-sm flex-col lg:flex-row lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center pb-6 pt-8 backdrop-blur-2xl lg:static lg:w-auto transition-colors duration-300">
          <span className={`text-3xl font-bold text-gray-800`}>AI-Assisted Web App Builder</span>
        </p>
      </div>

      <div className="relative z-[-1] flex place-items-center my-8">
        <h1 className="text-3xl font-bold text-gray-900">Code Generation & Visual Builder</h1>
      </div>

      <div className="w-full max-w-7xl flex flex-col md:flex-row gap-8 min-h-[600px]">
        {/* Component Library Section */}
        <div className={`w-full md:w-1/3 p-6 rounded-lg shadow-lg md:max-h-[600px] overflow-y-auto bg-white`}>
          <h2 className={`text-xl font-semibold mb-4 text-gray-900`}>Component Library</h2>
          {componentLibrary.map((component) => (
            <div
              key={component.id}
              draggable
              onDragStart={(e) => handleDragStart(e, component.id)}
              className={`p-4 rounded-lg shadow-md mb-4 cursor-grab active:cursor-grabbing transition-all duration-200 hover:scale-105 bg-blue-100 text-blue-800 hover:bg-blue-200`}
            >
              {component.name}
            </div>
          ))}
        </div>

        {/* Canvas Section */}
        <div
          className={`w-full md:w-2/3 p-6 rounded-lg shadow-lg flex-grow flex flex-col justify-start min-h-[500px] border-4 border-dashed transition-all duration-200
            ${isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}
            bg-white`}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
        >
          {canvasItems.length > 0 ? (
            canvasItems.map((item) => (
              <div key={item.id} className="relative p-2 m-2 group">
                <DynamicComponentRenderer code={item.code} />
                <button
                  onClick={() => handleRemoveItem(item.id)}
                  className="absolute top-2 right-2 w-7 h-7 flex items-center justify-center text-white bg-red-600 rounded-full opacity-0 group-hover:opacity-100 hover:bg-red-700 transition-opacity duration-200"
                  aria-label="Remove component"
                >
                  <svg xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            ))
          ) : (
            <div className="text-center text-gray-500 p-4">
              <h2 className="text-xl font-semibold mb-2">Drag & Drop Your Components Here</h2>
              <p>Try dragging one of the components from the library on the left.</p>
            </div>
          )}
        </div>
      </div>

      <div className="w-full max-w-7xl mt-8 p-6 flex flex-col md:flex-row gap-4">
        <div className={`w-full md:w-2/3 p-6 rounded-lg shadow-lg bg-white`}>
          <h2 className={`text-xl font-semibold mb-4 text-gray-900`}>Generate New Components</h2>
          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Enter your prompt here, e.g., 'Create a simple React component for a button with a blue background and a hover effect.'"
              rows={5}
              className={`w-full p-4 rounded-lg border focus:outline-none focus:ring-2 focus:ring-blue-400 transition-colors duration-200
                bg-gray-100 border-gray-300 text-gray-800`}
              disabled={isLoading}
            />
            <button
              type="submit"
              className="w-full py-3 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition-colors duration-200"
              disabled={isLoading}
            >
              {isLoading ? 'Generating...' : 'Generate & Add to Library'}
            </button>
          </form>
          {generatedCode && (
            <div className="mt-8">
              <h2 className={`text-xl font-semibold mb-2 text-gray-900`}>Generated Code:</h2>
              <div className="flex justify-between items-center mb-2">
                <button
                  onClick={handleCopy}
                  className="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors duration-200 text-sm"
                >
                  {copied ? 'Copied!' : 'Copy Code'}
                </button>
              </div>
              <pre className={`w-full p-4 rounded-lg overflow-auto bg-gray-800 text-green-300`}>
                <code>{generatedCode}</code>
              </pre>
            </div>
          )}
        </div>

        {/* Publish Section */}
        <div className={`w-full md:w-1/3 p-6 rounded-lg shadow-lg flex flex-col justify-center items-center bg-white`}>
          <h2 className={`text-xl font-semibold mb-4 text-gray-900`}>Publish Your Website</h2>
          <button
            onClick={handlePublish}
            className="w-full py-3 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 transition-colors duration-200"
            disabled={isLoading || canvasItems.length === 0}
          >
            {isLoading ? 'Publishing...' : 'Publish to Web'}
          </button>
          {error && (
            <div className="mt-4 p-4 bg-red-100 text-red-800 rounded-lg border border-red-300 w-full text-center">
              {error}
            </div>
          )}
          {publishedUrl && (
            <div className="mt-4 p-4 bg-green-100 text-green-800 rounded-lg border border-green-300 w-full text-center">
              <p className="font-semibold mb-2">Published successfully!</p>
              <a href={publishedUrl} target="_blank" rel="noopener noreferrer" className="text-sm break-all underline hover:text-green-900">
                {publishedUrl}
              </a>
            </div>
          )}
        </div>
      </div>
    </main>
  );
}